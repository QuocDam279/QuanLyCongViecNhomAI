// controllers/groupController.js
const axios = require('axios');
const mongoose = require('mongoose');
const Group = require('../models/Group');
const GroupMember = require('../models/GroupMember');
const User = require('../models/User'); // ƒë·ªÉ l·∫•y th√¥ng tin user th·ªß c√¥ng

// T·∫°o nh√≥m m·ªõi
exports.createGroup = async (req, res) => {
  try {
    const { name, description } = req.body;

    const group = await Group.create({
      name,
      description,
      createdBy: req.user.userId
    });

    // Th√™m ng∆∞·ªùi t·∫°o v√†o danh s√°ch th√†nh vi√™n v·ªõi vai tr√≤ leader
    await GroupMember.create({
      groupId: group._id,
      userId: new mongoose.Types.ObjectId(req.user.userId),
      role: 'leader'
    });

    res.status(201).json({ message: 'T·∫°o nh√≥m th√†nh c√¥ng', group });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// M·ªùi th√†nh vi√™n b·∫±ng email
exports.inviteMember = async (req, res) => {
  try {
    const { email, role } = req.body;
    const { groupId } = req.params;

    // ki·ªÉm tra group t·ªìn t·∫°i
    const group = await Group.findById(groupId);
    if (!group) return res.status(404).json({ error: "Nh√≥m kh√¥ng t·ªìn t·∫°i" });

    // üîó g·ªçi sang auth-service ƒë·ªÉ t√¨m user theo email
    let user;
    try {
      const response = await axios.get(
        `http://auth-service:5001/api/user/by-email/${encodeURIComponent(email)}`,
        { headers: { Authorization: req.headers.authorization } }
      );
      user = response.data;
    } catch (err) {
      return res.status(404).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    // ki·ªÉm tra tr√πng
    const existing = await GroupMember.findOne({ groupId, userId: user._id });
    if (existing) return res.status(400).json({ error: "Th√†nh vi√™n ƒë√£ t·ªìn t·∫°i" });

    // th√™m member
    const member = await GroupMember.create({
      groupId: new mongoose.Types.ObjectId(groupId),
      userId: new mongoose.Types.ObjectId(user._id),
      role: role || "member",
    });

    res.status(201).json({
      message: "M·ªùi th√†nh vi√™n th√†nh c√¥ng",
      member: {
        ...member.toObject(),
        user: { _id: user._id, name: user.name, email: user.email }
      }
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Ph√¢n c√¥ng vai tr√≤
// Ph√¢n c√¥ng vai tr√≤ (ch·ªâ leader m·ªõi ƒë∆∞·ª£c chuy·ªÉn leader)
exports.assignRole = async (req, res) => {
  try {
    const { userId, role } = req.body;
    const { groupId } = req.params;

    // Ki·ªÉm tra member m·ªõi t·ªìn t·∫°i
    const memberToUpdate = await GroupMember.findOne({ groupId, userId });
    if (!memberToUpdate) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n' });

    if (role === 'leader') {
      // T√¨m leader hi·ªán t·∫°i v√† h·∫° quy·ªÅn th√†nh member
      await GroupMember.updateMany(
        { groupId, role: 'leader' },
        { role: 'member' }
      );
    }

    // G√°n role m·ªõi cho member
    memberToUpdate.role = role;
    await memberToUpdate.save();

    res.json({ message: 'C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng', member: memberToUpdate });
  } catch (err) {
    console.error('assignRole error:', err);
    res.status(500).json({ error: err.message });
  }
};

// L·∫•y danh s√°ch th√†nh vi√™n (kh√¥ng d√πng populate)
exports.getMembers = async (req, res) => {
  try {
    const { groupId } = req.params;

    const members = await GroupMember.find({ groupId }).lean();

    const enrichedMembers = await Promise.all(
      members.map(async (m) => {
        try {
          const response = await axios.get(
            `http://auth-service:5001/api/user/${m.userId}`,
            {
              headers: { Authorization: req.headers.authorization }
            }
          );
          return {
            ...m,
            user: response.data
          };
        } catch (err) {
          return {
            ...m,
            user: null
          };
        }
      })
    );

    res.json(enrichedMembers);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};



// L·∫•y danh s√°ch nh√≥m c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
exports.getUserGroups = async (req, res) => {
  try {
    const userId = req.user.userId;

    // T√¨m t·∫•t c·∫£ groupId m√† user ƒëang tham gia
    const memberships = await GroupMember.find({ userId }).lean();
    const groupIds = memberships.map(m => m.groupId);

    // L·∫•y th√¥ng tin nh√≥m t∆∞∆°ng ·ª©ng
    const groups = await Group.find({ _id: { $in: groupIds } }).lean();

    res.json({
      success: true,
      groups
    });
  } catch (err) {
    console.error('‚ùå L·ªói l·∫•y nh√≥m c·ªßa ng∆∞·ªùi d√πng:', err.message);
    res.status(500).json({ success: false, error: err.message });
  }
};

// X√≥a ho·∫∑c r·ªùi nh√≥m
exports.removeMember = async (req, res) => {
  try {
    const { groupId, userId: targetUserId } = req.params;
    const requesterId = req.user && req.user.userId; // id ng∆∞·ªùi g·ªçi API (t·ª´ auth middleware)

    if (!requesterId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // T√¨m membership c·ªßa target v√† requester
    const targetMember = await GroupMember.findOne({ groupId, userId: targetUserId });
    if (!targetMember) {
      return res.status(404).json({ error: 'Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i trong nh√≥m' });
    }

    // N·∫øu ng∆∞·ªùi g·ªçi l√† ch√≠nh ng∆∞·ªùi b·ªã x√≥a -> cho ph√©p (r·ªùi nh√≥m)
    if (requesterId === String(targetUserId) || requesterId === targetUserId) {
      await GroupMember.findOneAndDelete({ groupId, userId: targetUserId });
      return res.json({ message: 'B·∫°n ƒë√£ r·ªùi nh√≥m / Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a' });
    }

    // N·∫øu kh√¥ng ph·∫£i ch√≠nh h·ªç, ki·ªÉm tra requester c√≥ ph·∫£i leader kh√¥ng
    const requesterMember = await GroupMember.findOne({ groupId, userId: requesterId });
    if (!requesterMember || requesterMember.role !== 'leader') {
      return res.status(403).json({ error: 'Ch·ªâ leader m·ªõi ƒë∆∞·ª£c x√≥a th√†nh vi√™n kh√°c' });
    }

    // NgƒÉn kh√¥ng cho leader x√≥a leader kh√°c (n·∫øu b·∫°n mu·ªën nghi√™m ng·∫∑t)
    if (targetMember.role === 'leader') {
      return res.status(403).json({ error: 'Kh√¥ng th·ªÉ x√≥a m·ªôt leader kh√°c' });
    }

    // Th·ª±c hi·ªán x√≥a
    await GroupMember.findOneAndDelete({ groupId, userId: targetUserId });

    return res.json({ message: 'X√≥a th√†nh vi√™n th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå removeMember error:', err);
    return res.status(500).json({ error: err.message });
  }
};

// X√≥a nh√≥m (ch·ªâ leader ho·∫∑c ng∆∞·ªùi t·∫°o nh√≥m m·ªõi ƒë∆∞·ª£c ph√©p)
exports.deleteGroup = async (req, res) => {
  try {
    const { groupId } = req.params;
    const userId = req.user.userId;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† leader c·ªßa nh√≥m kh√¥ng
    const member = await GroupMember.findOne({ groupId, userId });
    if (!member || member.role !== 'leader') {
      return res.status(403).json({ error: 'Ch·ªâ leader m·ªõi ƒë∆∞·ª£c ph√©p x√≥a nh√≥m' });
    }

    // X√≥a t·∫•t c·∫£ th√†nh vi√™n trong nh√≥m
    await GroupMember.deleteMany({ groupId });

    // X√≥a nh√≥m
    await Group.findByIdAndDelete(groupId);

    res.json({ message: 'ƒê√£ x√≥a nh√≥m th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// S·ª≠a th√¥ng tin nh√≥m (t√™n, m√¥ t·∫£)
exports.updateGroup = async (req, res) => {
  try {
    const { groupId } = req.params; // l·∫•y id nh√≥m t·ª´ url
    const { name, description } = req.body;

    // ki·ªÉm tra nh√≥m t·ªìn t·∫°i
    const group = await Group.findById(groupId);
    if (!group) {
      return res.status(404).json({ message: "Nh√≥m kh√¥ng t·ªìn t·∫°i" });
    }

    // ch·ªâ leader m·ªõi ƒë∆∞·ª£c s·ª≠a nh√≥m
    const member = await GroupMember.findOne({
      groupId: groupId,
      userId: req.user.userId,
    });

    if (!member || member.role !== "leader") {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a nh√≥m n√†y" });
    }

    // c·∫≠p nh·∫≠t th√¥ng tin (cho ph√©p x√≥a m√¥ t·∫£ b·∫±ng c√°ch g·ª≠i "")
    if (name !== undefined) group.name = name;
    if (description !== undefined) group.description = description;

    await group.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t nh√≥m th√†nh c√¥ng", group });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


